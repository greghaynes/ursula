#!/usr/bin/env bash

readonly ARGS="$@"

# Determine what this script is called
readonly PROGNAME=$(basename $0)

# Determine where on disk this script lives and executes from
# From: http://stackoverflow.com/a/246128
readonly PROGDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source ${PROGDIR}/../share/common

usage() {
  cat <<- USAGE
    Usage: ${0} -e <environment> -p <playbook> -x "<extra ansible args> <flags>"
      -f    forward ssh agent
      -h    display this help message
USAGE

  exit -1
}

URSULA_SSH_FORWARD=false

process_opts() {
  # Prefer the use of explicit shortopts
  while getopts "htfe:p:x:" OPTION; do
    case $OPTION in
      h)
        usage
        ;;
      e)
        readonly URSULA_ENV=${PWD}/${OPTARG}
        local URSULA_ENV_GETOPTS=true
        ;;
      f)
        readonly URSULA_SSH_FORWARD=true
        ;;
      p)
        readonly PLAYBOOK=${OPTARG}
        local PLAYBOOK_GETOPTS=true
        ;;
      t)
        readonly TEST_ARGS='--syntax-check --list-tasks'
        ;;
      x)
        readonly EXTRA_ANSIBLE_ARGS=${OPTARG}
        local EXTRA_ANSIBLE_ARGS_GETOPTS=true
        ;;
      :)
        echo "Option -${OPTARG} requires an argument." >&2
        usage
        ;;
      \?)
        echo "Invalid option: -${OPTARG}" >&2
        usage
        ;;
    esac
  done

  # Backwards compatibility for positional arguments
  if [ -z ${URSULA_ENV} ]; then
    readonly URSULA_ENV=${PWD}/${@:$OPTIND:1}
  fi
  if [ -z ${PLAYBOOK} ]; then
    readonly PLAYBOOK=${@:$OPTIND+1:1}
    OPTIND=$((${OPTIND} + 2))
  fi

  # No opt or positional args were supplied
  if [ -z ${URSULA_ENV} ] || [ -z ${PLAYBOOK} ]; then
    usage
  fi

  # Mixed opt and positional args were supplied
  if ([ ${URSULA_ENV_GETOPTS} ] && [ ! ${PLAYBOOK_GETOPTS} ]) || ([ ! ${URSULA_ENV_GETOPTS} ] && [ ${PLAYBOOK_GETOPTS} ]); then
    echo "ERROR: Mixed short opts and positional args are not supported." >&2
    usage
  fi

  # Ignore previously processed options and positional arguments
  if [ -z "${EXTRA_ANSIBLE_ARGS}" ]; then
    shift $((${OPTIND} - 1))
    readonly EXTRA_ANSIBLE_ARGS="$*"
  fi

  export URSULA_ENV
}

set_vars() {
  PREDEPLOY_PLAYBOOK=${URSULA_ENV}/playbooks/predeploy.yml
  POSTDEPLOY_PLAYBOOK=${URSULA_ENV}/playbooks/postdeploy.yml
  HOSTS=${URSULA_ENV}/hosts
  SSH_CONFIG=${URSULA_ENV}/ssh_config
  if [ ${URSULA_SSH_FORWARD} == true ]; then
    ANSIBLE_SSH_ARGS="-o ForwardAgent=yes"
  fi

  if [ -e "${URSULA_ENV}/../defaults.yml" ]; then
    export ANSIBLE_VAR_DEFAULTS_FILE="${URSULA_ENV}/../defaults.yml"
  fi

  if [ -e ${SSH_CONFIG} ]; then
    export ANSIBLE_SSH_ARGS="${ANSIBLE_SSH_ARGS} -F ${SSH_CONFIG}"
  fi
}

main() {
  ANSIBLE_VERSION=$(ansible-playbook --version | head -n1)
  if [ "$ANSIBLE_VERSION" != "ansible-playbook ${URSULA_ANSIBLE_VERSION}" ]; then
    echo "You are not using ansible-playbook ${URSULA_ANSIBLE_VERSION}. Current version: '${ANSIBLE_VERSION}'"
    echo "You may install the correct version with 'pip install -U -r requirements.txt'"
    exit -1
  fi

  for pbook in ${PREDEPLOY_PLAYBOOK} ${PLAYBOOK} ${POSTDEPLOY_PLAYBOOK}; do
    if [ -f ${pbook} ]; then
      command=$(ansible_command ${HOSTS} "root" ${pbook})
      if [[ ${pbook} == ${PLAYBOOK} ]]; then
        $command $EXTRA_ANSIBLE_ARGS $TEST_ARGS
      else
        # if pre or post deploy we don't want tags.
        EXTRA_ANSIBLE_ARGS_NOTAGS=`echo "${EXTRA_ANSIBLE_ARGS} " | sed 's/--tags=.* / /' | sed 's/--skip-tags=.* / /'`
        $command $EXTRA_ANSIBLE_ARGS_NOTAGS $TEST_ARGS
      fi
      if [ "$?" != "0" ]; then
        echo "Run failed on playbook ${pbook}"
        exit -1
      fi
    fi
  done
}

process_opts "$@"
set_vars
main
